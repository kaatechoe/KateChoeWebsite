{"ast":null,"code":"import React, { useEffect } from 'react';\nimport WebFont from 'webfontloader';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Font = function Font(props) {\n  return React.createElement(\"div\", {\n    style: styleGen(props)\n  }, React.createElement(FontLoader, Object.assign({}, props)), props.children);\n};\n\nvar Text = function Text(props) {\n  return React.createElement(\"p\", Object.assign({}, _extends({}, Object.keys(props).reduce(function (object, key) {\n    if (!['family', 'italic', 'weight', 'onLoad', 'onError', 'onAllLoad', 'onAllError'].includes(key)) {\n      object[key] = props[key];\n    }\n\n    return object;\n  }, {})), {\n    style: _extends({}, styleGen(props), props.style)\n  }), React.createElement(FontLoader, Object.assign({}, props, {\n    text: props.children\n  })), props.children);\n};\n\nvar FontLoader = function FontLoader(_ref) {\n  var family = _ref.family,\n      _ref$weight = _ref.weight,\n      weight = _ref$weight === void 0 ? 400 : _ref$weight,\n      _ref$italic = _ref.italic,\n      italic = _ref$italic === void 0 ? false : _ref$italic,\n      _ref$provider = _ref.provider,\n      provider = _ref$provider === void 0 ? 'google' : _ref$provider,\n      _ref$onLoad = _ref.onLoad,\n      onLoad = _ref$onLoad === void 0 ? function () {} : _ref$onLoad,\n      _ref$onError = _ref.onError,\n      onError = _ref$onError === void 0 ? function () {} : _ref$onError,\n      _ref$onAllLoad = _ref.onAllLoad,\n      onAllLoad = _ref$onAllLoad === void 0 ? function () {} : _ref$onAllLoad,\n      _ref$onAllError = _ref.onAllError,\n      onAllError = _ref$onAllError === void 0 ? function () {} : _ref$onAllError,\n      _ref$text = _ref.text,\n      text = _ref$text === void 0 ? undefined : _ref$text;\n  useEffect(function () {\n    var WebFontConfig = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    };\n\n    if (provider === 'google') {\n      var fontFamily = GoogleFont({\n        family: family,\n        weight: weight,\n        italic: italic\n      });\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text: text\n      };\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      };\n    }\n\n    WebFont.load(WebFontConfig);\n  }, [family, weight, italic, provider, onLoad, onError]);\n  return null;\n};\n\nvar GoogleFont = function GoogleFont(_ref2) {\n  var family = _ref2.family,\n      _ref2$weight = _ref2.weight,\n      weight = _ref2$weight === void 0 ? 400 : _ref2$weight,\n      _ref2$italic = _ref2.italic,\n      italic = _ref2$italic === void 0 ? false : _ref2$italic;\n  var encodedURL = encodeURIComponent(family);\n\n  if (weight !== 400 && italic) {\n    encodedURL += \":bi\";\n  } else if (weight !== 400) {\n    encodedURL += \":\" + weight;\n  } else if (italic) {\n    encodedURL += \":i\";\n  }\n\n  return encodedURL;\n};\n\nvar styleGen = function styleGen(_ref3) {\n  var family = _ref3.family,\n      italic = _ref3.italic,\n      weight = _ref3.weight;\n  return {\n    fontFamily: \"'\" + family + \"'\",\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  };\n};\n\nexport default Font;\nexport { FontLoader, Text };","map":{"version":3,"sources":["../src/index.tsx"],"names":["Font","style","styleGen","React","props","Text","object","text","children","FontLoader","family","weight","italic","provider","onLoad","onError","onAllLoad","onAllError","undefined","useEffect","WebFontConfig","classes","fontactive","fontinactive","active","inactive","fontFamily","GoogleFont","families","WebFont","encodedURL","encodeURIComponent","fontStyle","fontWeight"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport WebFont from 'webfontloader'\n\ninterface Props extends LoaderProps {\n  children: JSX.Element | JSX.Element[]\n}\n\nconst Font = (props: Props): JSX.Element => {\n  return (\n    <div style={styleGen(props)}>\n      <FontLoader {...props} />\n      {props.children}\n    </div>\n  )\n}\n\ninterface TextProps extends LoaderProps {\n  children: string\n}\n\nexport const Text = (\n  props: React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLParagraphElement>,\n    HTMLParagraphElement\n  > &\n    TextProps\n): JSX.Element => {\n  return (\n    <p\n      {...{\n        ...Object.keys(props).reduce((object, key) => {\n          if (\n            ![\n              'family',\n              'italic',\n              'weight',\n              'onLoad',\n              'onError',\n              'onAllLoad',\n              'onAllError'\n            ].includes(key)\n          ) {\n            object[key] = props[key]\n          }\n          return object\n        }, {})\n      }} // pass props but remove font props\n      style={{ ...styleGen(props), ...props.style }} // combine the font style and any custom style from props\n    >\n      <FontLoader {...props} text={props.children} />\n      {props.children}\n    </p>\n  )\n}\n\ninterface LoaderProps extends FontProps {\n  provider?: string\n  onLoad?: (family: string, style: string) => void\n  onError?: (family: string, style: string) => void\n  onAllLoad?: () => void\n  onAllError?: () => void\n  text?: string\n}\n\nexport const FontLoader = ({\n  family,\n  weight = 400,\n  italic = false,\n  provider = 'google',\n  onLoad = () => {},\n  onError = () => {},\n  onAllLoad = () => {},\n  onAllError = () => {},\n  text = undefined\n}: LoaderProps): JSX.Element | null => {\n  useEffect(() => {\n    const WebFontConfig: WebFont.Config = {\n      classes: false,\n      fontactive: onLoad,\n      fontinactive: onError,\n      active: onAllLoad,\n      inactive: onAllError\n    }\n\n    if (provider === 'google') {\n      const fontFamily = GoogleFont({\n        family,\n        weight,\n        italic\n      })\n      WebFontConfig.google = {\n        families: [fontFamily],\n        text\n      }\n    } else if (provider === 'local') {\n      WebFontConfig.custom = {\n        families: [family]\n      }\n    }\n\n    WebFont.load(WebFontConfig)\n  }, [family, weight, italic, provider, onLoad, onError])\n\n  return null\n}\n\nconst GoogleFont = ({ family, weight = 400, italic = false }: FontProps) => {\n  let encodedURL = encodeURIComponent(family)\n\n  if (weight !== 400 && italic) {\n    encodedURL += `:bi`\n  } else if (weight !== 400) {\n    encodedURL += `:${weight}`\n  } else if (italic) {\n    encodedURL += `:i`\n  }\n\n  return encodedURL\n}\n\ninterface FontProps {\n  family: string\n  weight?: number\n  italic?: boolean\n}\n\nconst styleGen = ({ family, italic, weight }: FontProps) => {\n  return {\n    fontFamily: `'${family}'`,\n    fontStyle: italic ? 'italic' : undefined,\n    fontWeight: weight\n  }\n}\n\nexport default Font\n"]},"metadata":{},"sourceType":"module"}